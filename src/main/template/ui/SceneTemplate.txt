package ui.scene;

import com.jfoenix.controls.*;
import com.jfoenix.controls.datamodels.treetable.RecursiveTreeObject;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeTableColumn;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import ui.tool.ConvertUtil;
import ui.viewmodel.*;
import dao.%table%Dao;
import entity.%table%;

import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;

public class %table%Scene implements Initializable {
    @FXML
    JFXTreeTableView table;
    @FXML
    BorderPane mainContent;
    @FXML
    VBox centerPane;
    @FXML
    ScrollPane scrollPane;
    @FXML
    VBox fieldContainer;

    %annotationFXML%

    @FXML
    StackPane rootPane;
    @FXML
    JFXButton deleteButton;
    @FXML
    VBox rightPane;
    @FXML
    JFXButton addButton;
    @FXML
    JFXButton approveButton;

    private ObservableList<%table%ViewModel> data = FXCollections.observableArrayList();

    boolean isUpdate = true;

    // Custom status bar
    private double x, y;

    public void handleDragged(MouseEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setX(event.getScreenX() - 6 - x);
        stage.setY(event.getScreenY() - 6 - y);
    }

    public void handlePressed(MouseEvent event) {
        x = event.getX();
        y = event.getY();
    }

  public void handleMousePressed(MouseEvent event) {
        int index = this.table.getSelectionModel().getSelectedIndex();

        %getFieldOfData%

        if (this.table.getSelectionModel().getSelectedIndex() != -1) {
            this.isUpdate = true;
            this.rightPane.setDisable(false);
            this.deleteButton.setVisible(true);
            this.approveButton.setText("Edit");
        }
    }

    public void handleReleased(MouseEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        if (stage.getY() < 0) {
            stage.setY(0);
        }
    }

    public void close(ActionEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.close();
    }

    public void minimize(ActionEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setIconified(true);
    }

 public boolean showConfirm(Stage stage, String title, String message) {
        JFXAlert<String> alert = new JFXAlert<>(stage);
        alert.initModality(Modality.APPLICATION_MODAL);
        alert.setOverlayClose(false);

        JFXDialogLayout layout = new JFXDialogLayout();
        layout.setHeading(new Text(title));
        layout.setBody(new Text(message));

        JFXButton okButton = new JFXButton("OK");
        okButton.setDefaultButton(true);
        okButton.setOnAction(addEvent -> {
            alert.setResult("OK");
            alert.hideWithAnimation();
        });

        JFXButton cancelButton = new JFXButton("CANCEL");
        cancelButton.setCancelButton(true);
        cancelButton.setOnAction(closeEvent -> alert.hideWithAnimation());

        layout.setActions(okButton, cancelButton);
        alert.setContent(layout);

        Optional<String> result = alert.showAndWait();
        if (result.isPresent()){
            if (result.get().equals("OK"))
                return true;
        }
        return false;
    }

    public void showDialog(String title, String message) {
        JFXDialogLayout layout = new JFXDialogLayout();
        layout.setHeading(new Text(title));
        layout.setBody(new Text(message));

        JFXButton okButton = new JFXButton("OK");
        layout.setActions(okButton);

        JFXDialog dialog = new JFXDialog(this.rootPane, layout, JFXDialog.DialogTransition.CENTER);

        okButton.setOnAction(e-> dialog.close());

        dialog.show();
    }

    public void deleteRow(ActionEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        boolean result = showConfirm(stage, "Confirmation", "Are you sure to delete this row?");
        if (result) {
            // TODO: delete
            int index = table.getSelectionModel().getSelectedIndex();
            %table%ViewModel viewModel = data.get(index);

            clearFields();
            this.rightPane.setDisable(true);
        }
    }

    public void addRow(ActionEvent event) {
        this.isUpdate = false;
        this.rightPane.setDisable(false);
        clearFields();
        this.deleteButton.setVisible(false);
        this.approveButton.setText("Add");
    }

    private void clearFields() {
        ObservableList<Node> textFields = this.fieldContainer.getChildren();
        for (Node node : textFields) {
            JFXTextField textField = (JFXTextField) node;
            textField.setText("");
        }
    }

    private %table%ViewModel getViewModel(){
        return new %table%ViewModel(%getFieldToCreateVM%
        );
    }

    // TODO Convert from ViewModel to Entity for using
    private %table% convertFromViewModelToEntity(%table%ViewModel model){
        %table% res = new %table%();

%getFieldToConvertEntity%

        return res;
    }

    public void approveModify(ActionEvent event) {
        // Add or update
        if (isUpdate) {
            // TODO update database
            try{
                %table%Dao dao = new %table%Dao();
                dao.delete(convertFromViewModelToEntity(data.get(table.getSelectionModel().getSelectedIndex())));
                dao.insert(convertFromViewModelToEntity(getViewModel()));
                dao.insert(convertFromViewModelToEntity(getViewModel()));
                fetchData();
                showDialog("Success", "Add database success");
                //dao.close();
            } catch (Exception e){
                showDialog("Failed", "Add database failed");
                e.printStackTrace();
            }
        } else {
            try{
                %table%Dao dao = new %table%Dao();
                dao.insert(convertFromViewModelToEntity(getViewModel()));
                fetchData();
                showDialog("Success", "Add database success");
                //dao.close();
            } catch (Exception e){
                showDialog("Failed", "Add database failed");
                e.printStackTrace();
            }
        }
    }

    %switchFunction%

    private void fetchData() {
        data.removeAll(data);
        new Thread(()->{
            %table%Dao dao = new %table%Dao();
                    List<%table%> list = dao.getAll();

                    for (%table% model : list) {
                        data.add(new %table%ViewModel(
                        %getField%));
                    }
                   //dao.close();
        }).start();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        %column%

        TreeItem<%table%ViewModel> root = new RecursiveTreeItem<>(data, RecursiveTreeObject::getChildren);
        table.setRoot(root);
        table.setShowRoot(false);
        table.setEditable(false);
        table.getColumns().setAll(%addColumn%);

        if (this.table.getSelectionModel().getSelectedIndex() == -1) {
            this.rightPane.setDisable(true);
        }

        fetchData();
    }
}
